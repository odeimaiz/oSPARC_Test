//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./modeler_types');
//HELPER FUNCTIONS AND STRUCTURES

var Modeler_GetRootGroup_args = function(args) {
};
Modeler_GetRootGroup_args.prototype = {};
Modeler_GetRootGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetRootGroup_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetRootGroup_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetRootGroup_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Entity(args.success);
    }
  }
};
Modeler_GetRootGroup_result.prototype = {};
Modeler_GetRootGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Entity();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetRootGroup_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetRootGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntities_args = function(args) {
};
Modeler_GetEntities_args.prototype = {};
Modeler_GetEntities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntities_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntities_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntities_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Entity]);
    }
  }
};
Modeler_GetEntities_result.prototype = {};
Modeler_GetEntities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Entity();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntities_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_ImportModel_args = function(args) {
  this.file_path_utf8 = null;
  if (args) {
    if (args.file_path_utf8 !== undefined && args.file_path_utf8 !== null) {
      this.file_path_utf8 = args.file_path_utf8;
    }
  }
};
Modeler_ImportModel_args.prototype = {};
Modeler_ImportModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path_utf8 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_ImportModel_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_ImportModel_args');
  if (this.file_path_utf8 !== null && this.file_path_utf8 !== undefined) {
    output.writeFieldBegin('file_path_utf8', Thrift.Type.STRING, 1);
    output.writeString(this.file_path_utf8);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_ImportModel_result = function(args) {
};
Modeler_ImportModel_result.prototype = {};
Modeler_ImportModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_ImportModel_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_ImportModel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityMeshes_args = function(args) {
  this.uuid = null;
  this.get_normals = false;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
    if (args.get_normals !== undefined && args.get_normals !== null) {
      this.get_normals = args.get_normals;
    }
  }
};
Modeler_GetEntityMeshes_args.prototype = {};
Modeler_GetEntityMeshes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.get_normals = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityMeshes_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityMeshes_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.get_normals !== null && this.get_normals !== undefined) {
    output.writeFieldBegin('get_normals', Thrift.Type.BOOL, 2);
    output.writeBool(this.get_normals);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityMeshes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityMesh]);
    }
  }
};
Modeler_GetEntityMeshes_result.prototype = {};
Modeler_GetEntityMeshes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.EntityMesh();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityMeshes_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityMeshes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_AddMeshes_args = function(args) {
  this.meshes = null;
  if (args) {
    if (args.meshes !== undefined && args.meshes !== null) {
      this.meshes = Thrift.copyList(args.meshes, [ttypes.EntityMesh]);
    }
  }
};
Modeler_AddMeshes_args.prototype = {};
Modeler_AddMeshes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.meshes = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.EntityMesh();
          elem94.read(input);
          this.meshes.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_AddMeshes_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_AddMeshes_args');
  if (this.meshes !== null && this.meshes !== undefined) {
    output.writeFieldBegin('meshes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.meshes.length);
    for (var iter95 in this.meshes)
    {
      if (this.meshes.hasOwnProperty(iter95))
      {
        iter95 = this.meshes[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_AddMeshes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Modeler_AddMeshes_result.prototype = {};
Modeler_AddMeshes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString();
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_AddMeshes_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_AddMeshes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_AddSpline_args = function(args) {
  this.Line = null;
  if (args) {
    if (args.Line !== undefined && args.Line !== null) {
      this.Line = new ttypes.EntityLine(args.Line);
    }
  }
};
Modeler_AddSpline_args.prototype = {};
Modeler_AddSpline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.Line = new ttypes.EntityLine();
        this.Line.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_AddSpline_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_AddSpline_args');
  if (this.Line !== null && this.Line !== undefined) {
    output.writeFieldBegin('Line', Thrift.Type.STRUCT, 1);
    this.Line.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_AddSpline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Modeler_AddSpline_result.prototype = {};
Modeler_AddSpline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_AddSpline_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_AddSpline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_AddSplines_args = function(args) {
  this.Lines = null;
  if (args) {
    if (args.Lines !== undefined && args.Lines !== null) {
      this.Lines = Thrift.copyList(args.Lines, [ttypes.EntityLine]);
    }
  }
};
Modeler_AddSplines_args.prototype = {};
Modeler_AddSplines_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.Lines = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.EntityLine();
          elem110.read(input);
          this.Lines.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_AddSplines_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_AddSplines_args');
  if (this.Lines !== null && this.Lines !== undefined) {
    output.writeFieldBegin('Lines', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.Lines.length);
    for (var iter111 in this.Lines)
    {
      if (this.Lines.hasOwnProperty(iter111))
      {
        iter111 = this.Lines[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_AddSplines_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Modeler_AddSplines_result.prototype = {};
Modeler_AddSplines_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readString();
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_AddSplines_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_AddSplines_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityWire_args = function(args) {
  this.uuid = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_GetEntityWire_args.prototype = {};
Modeler_GetEntityWire_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityWire_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityWire_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityWire_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Vertex]);
    }
  }
};
Modeler_GetEntityWire_result.prototype = {};
Modeler_GetEntityWire_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Vertex();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityWire_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityWire_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CutEntity_args = function(args) {
  this.uuid = null;
  this.point_on_plane = null;
  this.normal = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
    if (args.point_on_plane !== undefined && args.point_on_plane !== null) {
      this.point_on_plane = new ttypes.Vertex(args.point_on_plane);
    }
    if (args.normal !== undefined && args.normal !== null) {
      this.normal = new ttypes.Vector(args.normal);
    }
  }
};
Modeler_CutEntity_args.prototype = {};
Modeler_CutEntity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.point_on_plane = new ttypes.Vertex();
        this.point_on_plane.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.normal = new ttypes.Vector();
        this.normal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CutEntity_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CutEntity_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.point_on_plane !== null && this.point_on_plane !== undefined) {
    output.writeFieldBegin('point_on_plane', Thrift.Type.STRUCT, 2);
    this.point_on_plane.write(output);
    output.writeFieldEnd();
  }
  if (this.normal !== null && this.normal !== undefined) {
    output.writeFieldBegin('normal', Thrift.Type.STRUCT, 3);
    this.normal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CutEntity_result = function(args) {
};
Modeler_CutEntity_result.prototype = {};
Modeler_CutEntity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CutEntity_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CutEntity_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModelerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ModelerClient.prototype = {};
ModelerClient.prototype.seqid = function() { return this._seqid; };
ModelerClient.prototype.new_seqid = function() { return this._seqid += 1; };
ModelerClient.prototype.GetRootGroup = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetRootGroup();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetRootGroup();
  }
};

ModelerClient.prototype.send_GetRootGroup = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetRootGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new Modeler_GetRootGroup_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetRootGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetRootGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetRootGroup failed: unknown result');
};
ModelerClient.prototype.GetEntities = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntities();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntities();
  }
};

ModelerClient.prototype.send_GetEntities = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntities', Thrift.MessageType.CALL, this.seqid());
  var args = new Modeler_GetEntities_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntities failed: unknown result');
};
ModelerClient.prototype.ImportModel = function(file_path_utf8, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ImportModel(file_path_utf8);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ImportModel(file_path_utf8);
  }
};

ModelerClient.prototype.send_ImportModel = function(file_path_utf8) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ImportModel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    file_path_utf8: file_path_utf8
  };
  var args = new Modeler_ImportModel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_ImportModel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_ImportModel_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ModelerClient.prototype.GetEntityMeshes = function(uuid, get_normals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntityMeshes(uuid, get_normals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntityMeshes(uuid, get_normals);
  }
};

ModelerClient.prototype.send_GetEntityMeshes = function(uuid, get_normals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntityMeshes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uuid: uuid,
    get_normals: get_normals
  };
  var args = new Modeler_GetEntityMeshes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntityMeshes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntityMeshes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntityMeshes failed: unknown result');
};
ModelerClient.prototype.AddMeshes = function(meshes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddMeshes(meshes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddMeshes(meshes);
  }
};

ModelerClient.prototype.send_AddMeshes = function(meshes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AddMeshes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    meshes: meshes
  };
  var args = new Modeler_AddMeshes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_AddMeshes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_AddMeshes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('AddMeshes failed: unknown result');
};
ModelerClient.prototype.AddSpline = function(Line, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddSpline(Line);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddSpline(Line);
  }
};

ModelerClient.prototype.send_AddSpline = function(Line) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AddSpline', Thrift.MessageType.CALL, this.seqid());
  var params = {
    Line: Line
  };
  var args = new Modeler_AddSpline_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_AddSpline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_AddSpline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('AddSpline failed: unknown result');
};
ModelerClient.prototype.AddSplines = function(Lines, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddSplines(Lines);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddSplines(Lines);
  }
};

ModelerClient.prototype.send_AddSplines = function(Lines) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AddSplines', Thrift.MessageType.CALL, this.seqid());
  var params = {
    Lines: Lines
  };
  var args = new Modeler_AddSplines_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_AddSplines = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_AddSplines_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('AddSplines failed: unknown result');
};
ModelerClient.prototype.GetEntityWire = function(uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntityWire(uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntityWire(uuid);
  }
};

ModelerClient.prototype.send_GetEntityWire = function(uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntityWire', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uuid: uuid
  };
  var args = new Modeler_GetEntityWire_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntityWire = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntityWire_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntityWire failed: unknown result');
};
ModelerClient.prototype.CutEntity = function(uuid, point_on_plane, normal, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CutEntity(uuid, point_on_plane, normal);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CutEntity(uuid, point_on_plane, normal);
  }
};

ModelerClient.prototype.send_CutEntity = function(uuid, point_on_plane, normal) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CutEntity', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uuid: uuid,
    point_on_plane: point_on_plane,
    normal: normal
  };
  var args = new Modeler_CutEntity_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CutEntity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CutEntity_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var ModelerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ModelerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ModelerProcessor.prototype.process_GetRootGroup = function(seqid, input, output) {
  var args = new Modeler_GetRootGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetRootGroup.length === 0) {
    Q.fcall(this._handler.GetRootGroup.bind(this._handler))
      .then(function(result) {
        var result_obj = new Modeler_GetRootGroup_result({success: result});
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetRootGroup(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetRootGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntities = function(seqid, input, output) {
  var args = new Modeler_GetEntities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntities.length === 0) {
    Q.fcall(this._handler.GetEntities.bind(this._handler))
      .then(function(result) {
        var result_obj = new Modeler_GetEntities_result({success: result});
        output.writeMessageBegin("GetEntities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntities", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntities(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntities", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntities", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_ImportModel = function(seqid, input, output) {
  var args = new Modeler_ImportModel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ImportModel.length === 1) {
    Q.fcall(this._handler.ImportModel.bind(this._handler), args.file_path_utf8)
      .then(function(result) {
        var result_obj = new Modeler_ImportModel_result({success: result});
        output.writeMessageBegin("ImportModel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportModel", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ImportModel(args.file_path_utf8, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_ImportModel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ImportModel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportModel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntityMeshes = function(seqid, input, output) {
  var args = new Modeler_GetEntityMeshes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntityMeshes.length === 2) {
    Q.fcall(this._handler.GetEntityMeshes.bind(this._handler), args.uuid, args.get_normals)
      .then(function(result) {
        var result_obj = new Modeler_GetEntityMeshes_result({success: result});
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntityMeshes(args.uuid, args.get_normals, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntityMeshes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_AddMeshes = function(seqid, input, output) {
  var args = new Modeler_AddMeshes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddMeshes.length === 1) {
    Q.fcall(this._handler.AddMeshes.bind(this._handler), args.meshes)
      .then(function(result) {
        var result_obj = new Modeler_AddMeshes_result({success: result});
        output.writeMessageBegin("AddMeshes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddMeshes", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.AddMeshes(args.meshes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_AddMeshes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddMeshes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddMeshes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_AddSpline = function(seqid, input, output) {
  var args = new Modeler_AddSpline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddSpline.length === 1) {
    Q.fcall(this._handler.AddSpline.bind(this._handler), args.Line)
      .then(function(result) {
        var result_obj = new Modeler_AddSpline_result({success: result});
        output.writeMessageBegin("AddSpline", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddSpline", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.AddSpline(args.Line, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_AddSpline_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddSpline", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddSpline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_AddSplines = function(seqid, input, output) {
  var args = new Modeler_AddSplines_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddSplines.length === 1) {
    Q.fcall(this._handler.AddSplines.bind(this._handler), args.Lines)
      .then(function(result) {
        var result_obj = new Modeler_AddSplines_result({success: result});
        output.writeMessageBegin("AddSplines", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddSplines", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.AddSplines(args.Lines, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_AddSplines_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddSplines", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddSplines", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntityWire = function(seqid, input, output) {
  var args = new Modeler_GetEntityWire_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntityWire.length === 1) {
    Q.fcall(this._handler.GetEntityWire.bind(this._handler), args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_GetEntityWire_result({success: result});
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntityWire(args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntityWire_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CutEntity = function(seqid, input, output) {
  var args = new Modeler_CutEntity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CutEntity.length === 3) {
    Q.fcall(this._handler.CutEntity.bind(this._handler), args.uuid, args.point_on_plane, args.normal)
      .then(function(result) {
        var result_obj = new Modeler_CutEntity_result({success: result});
        output.writeMessageBegin("CutEntity", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CutEntity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CutEntity(args.uuid, args.point_on_plane, args.normal, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_CutEntity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CutEntity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CutEntity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
